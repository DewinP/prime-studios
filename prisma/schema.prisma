// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Track {
  id          String        @id @default(uuid())
  name        String
  artist      String
  description String?
  duration    Int
  audioUrl    String
  coverUrl    String?
  status      String   @default("draft") // draft, published
  plays       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeProductId String?
  prices      TrackPrice[]

  @@map("tracks")
}

model TrackPrice {
  id            String   @id @default(uuid())
  trackId       String
  track         Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  licenseType   String   // e.g., "mp3_lease", "wav_lease", etc.
  price         Int      // in cents
  stripePriceId String   // Stripe Price ID

  @@map("track_prices")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  tracks Track[]
  payments Payment[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Payment {
  id              String    @id @default(uuid())
  userId          String?
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSessionId String    // Required: always set on creation
  stripePaymentId String?   @unique // Nullable: set after payment
  stripeProductId String
  amount          Int       // Amount in cents
  currency        String    @default("usd")
  status          String    @default("pending") // pending, succeeded, failed, canceled
  description     String?
  metadata        Json?     // Additional metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("payments")
}
