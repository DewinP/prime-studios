generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Track {
  id              String       @id @default(uuid())
  name            String
  artist          String
  description     String?
  duration        Int
  audioUrl        String
  coverUrl        String?
  status          String       @default("draft")
  plays           Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  userId          String
  stripeProductId String?
  prices          TrackPrice[]
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@map("tracks")
}

model TrackPrice {
  id            String @id @default(uuid())
  trackId       String
  licenseType   String
  price         Int
  stripePriceId String
  track         Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]

  @@map("track_prices")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          String?   @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  tracks        Track[]
  orders        Order[]

  @@map("users")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Order {
  id              String       @id @default(uuid())
  userId          String?
  orderNumber     String       @unique
  status          String       @default("pending") // pending, paid, fulfilled, cancelled, refunded
  subtotal        Int
  tax             Int          @default(0)
  total           Int
  currency        String       @default("usd")
  stripeSessionId String?      @unique
  stripePaymentId String?      @unique
  billingEmail    String
  billingName     String?
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id            String     @id @default(uuid())
  orderId       String
  trackId       String?
  trackPriceId  String?
  licenseType   String
  quantity      Int        @default(1)
  unitPrice     Int
  totalPrice    Int
  stripePriceId String?
  createdAt     DateTime   @default(now())
  order         Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  track         Track?     @relation(fields: [trackId], references: [id], onDelete: SetNull)
  trackPrice    TrackPrice? @relation(fields: [trackPriceId], references: [id], onDelete: SetNull)

  @@map("order_items")
}


